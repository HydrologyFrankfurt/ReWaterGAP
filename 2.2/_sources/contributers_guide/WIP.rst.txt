########################
Contributing to the code (Under construction)
########################

General Guidelines
- Write Code for Others: Your code should be easy to read, understand, and extend.
- Comment Your Code: Provide meaningful comments to your algorithm where necessary.
- Follow Project Conventions: Adhere to existing coding styles, naming conventions, and architectural patterns in the project.
- Review and Test: Before submitting a contribution, review your changes and test them to ensure they work as expected.

*********************
WaterGAP Architecture 
*********************

The Model-View-Controller (MVC) architectural pattern in its low-level implementation (Fig. 3) is adopted for the reprogrammed software (Gamma et al., 1994; Guaman et al., 2021). This modular design allows for easy modification and extension of model algorithms. The MVC pattern organizes the reprogrammed software into three key components:  Model, Controller, and View. 

Controller. The Controller package is responsible for handling configuration-related tasks. The Config_handler() function processes information from configuration files, which includes paths to input data such as climate forcing and static datasets, as well as runtime settings like the simulation period and the type of run (e.g., naturalized or anthropogenic). This information is passed into classes such as ClimateForcing and StaticData, which read the specified input files and prepare the data for use in the model. For instance, the ClimateForcing class accesses and processes precipitation and temperature data, while StaticData processes data for land cover and other static variables.  

Model. The Model package implements all hydrological processes organized into vertical and lateral water balance components. In the reprogrammed WGHM, each storage compartment is designed as a separate Python module. The VerticalWaterBalance class coordinates hydrological processes such as the calculation of net radiation and potential evapotranspiration (PET) using the Priestley-Taylor algorithm (although other PET schemes can be easily incorporated), canopy, snow, and the soil water balance. The class uses its calculate() function to manage these computations and obtain the resulting storages and fluxes through the get_storages_and_fluxes() function. Also, the LateralWaterBalance class addresses horizontal water movements via calculate() function which further calls the river_routing() function. This involves the simulation of storage compartments like groundwater, lakes and wetlands, reservoir-regulated water bodies, and rivers. It similarly retrieves all associated storages and fluxes through its get_storages_and_fluxes() functions.  

Model parameters in NetCDF format are also processed here. The NetCDF format not only facilitates easy visualization of parameter distribution but also enables convenient parameter modification using libraries like Xarray (Hoyer and Hamman, 2017). 

View. The View package processes the outputs generated by the Model. It extracts storages and fluxes through the get_storages_and_fluxes() functions of the VerticalWaterBalance and LateralWaterBalance classes. Outputs are then converted to base units and saved as NetCDF files. NetCDFs are enriched with metadata, which comply with ISIMIP conventions (https://www.isimip.org/protocol/preparing-simulation-files/). 

The run_watergap module coordinates the entire model workflow. It manages process initialization and daily time-stepping to perform computations.   

Figure: Model-Viewâ€“Controller (MVC) architectural pattern of the reprogrammed WGHM software at the package, class, and function levels. The Controller package manages the configuration and input data (e.g., climate time series and static data), the Model package contains core hydrological processes and the View package handles the saving and presentation of model outputs in NetCDF format. Classes are represented with capitalized names, and functions are denoted by lower-case names ending with parentheses. 

**********************************
Code Standard and Style Guidelines
**********************************

Set up your editor to follow `PEP 8 guidelines <https://peps.python.org/pep-0008/>`_, Use `Pylint <https://pypi.org/project/pylint/>`_ (or other linting tools) to for checking against PEP 8 and potential bugs. 

We recommend the use of pylint because it has a score which can be easily interpreted. All pylint scores should be above 9.
See Here on how to use Pylint for a code piece.

Example code should look like this
ToDo: Example here

Example functions should look like this:
ToDo: Example here

Do not use a library that is not in the reqirurement unless that very much required. This is to desist from some libraries which is likely not to be maintained in the future and cause the WaterGAP code to break.

ToDo: Example of how to do pep8

*****************
Testing your code
*****************

Example Test

How to run the tests

Docker









